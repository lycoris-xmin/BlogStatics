$(function(){$.createSignalR=function(n,e=!1){const t=[],i=[];null!=e&&"boolean"==typeof e||(e=!1);const c=this;return this.instance=void 0,this.connect=async function(){await c.instance.start()},this.disconnect=async function(){c.instance&&await c.instance.stop()},this.on=function(n,e){let t={eventName:n,callback:e,subscribe:!1},o=i.findIndex(n=>n.eventName==t.eventName);-1==o?(i.push(t),o=i.findIndex(n=>n.eventName==t.eventName)):i[o]=t,c.instance?(c.instance.on(i[o].eventName,i[o].callback),i[o].subscribe=!0):i[o].subscribe=!1},this.unbind=function(n){if(!c.instance)return void console.error("signalR disconnect");let e=i.findIndex(e=>e.eventName==n);e>-1&&(i.splice(e,1),c.instance.off(n))},this.call=async function(n,...e){if(!c.instance)throw new Error("signalR disconnect");await c.instance.invoke(n,...e)},this.connectdHadler=function(n){null!=c.instance?n():t.push(n)},_init=function(){c.instance=(new signalR.HubConnectionBuilder).withUrl(n).withAutomaticReconnect({nextRetryDelayInMilliseconds:n=>n.previousRetryCount>15?9e4:n.previousRetryCount>10?6e4:n.previousRetryCount>3?3e4:3e3}).configureLogging(e?signalR.LogLevel.Information:signalR.LogLevel.Error).build(),c.instance.onreconnected(()=>{if(i.length>0)for(let n of i)c.on(n.eventName,n.callback)})},_init(),this}});