const debounce=(t,e)=>{let n=0;return(...i)=>{clearTimeout(n),n=setTimeout(()=>{n=0,t(...i)},e)}};$.extend($.fn.bootstrapTable.defaults,{mobileResponsive:!1,minWidth:562,minHeight:void 0,heightThreshold:100,checkOnInit:!0,columnsHidden:[]}),$.BootstrapTable=class extends $.BootstrapTable{init(...i){if(super.init(...i),this.options.mobileResponsive&&this.options.minWidth){this.options.minWidth<100&&this.options.resizable&&(console.info("The minWidth when the resizable extension is active should be greater or equal than 100"),this.options.minWidth=100);let n={width:$(window).width(),height:$(window).height()};var t;$(window).on("resize orientationchange",debounce(()=>{var i=$(window).width(),t=$(window).height(),e=$(document.activeElement);e.length&&["INPUT","SELECT","TEXTAREA"].includes(e.prop("nodeName"))||(Math.abs(n.height-t)>this.options.heightThreshold||n.width!==i)&&(this.changeView(i,t),n={width:i,height:t})},200)),this.options.checkOnInit&&(i=$(window).width(),t=$(window).height(),this.changeView(i,t),n={width:i,height:t})}}conditionCardView(){this.changeTableView(!1),this.showHideColumns(!1)}conditionFullView(){this.changeTableView(!0),this.showHideColumns(!0)}changeTableView(i){this.options.cardView=i,this.toggleView()}showHideColumns(t){0<this.options.columnsHidden.length&&this.columns.forEach(i=>{this.options.columnsHidden.includes(i.field)&&i.visible!==t&&this._toggleColumn(this.fieldsColumnsIndex[i.field],t,!0)})}changeView(i,t){this.options.minHeight?i<=this.options.minWidth&&t<=this.options.minHeight?this.conditionCardView():i>this.options.minWidth&&t>this.options.minHeight&&this.conditionFullView():i<=this.options.minWidth?this.conditionCardView():i>this.options.minWidth&&this.conditionFullView(),this.resetView()}};